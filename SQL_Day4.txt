
# Question 1 - Employees With Missing Information
Table: Employees
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| employee_id | int     |
| name        | varchar |
+-------------+---------+
employee_id is the primary key for this table.
Each row of this table indicates the name of the employee whose ID is employee_id.

Table: Salaries
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| employee_id | int     |
| salary      | int     |
+-------------+---------+
employee_id is the primary key for this table.
Each row of this table indicates the salary of the employee whose ID is employee_id.
Write an SQL query to report the IDs of all the employees with missing information. The information of an employee is missing if:
The employee's name is missing, or
The employee's salary is missing.
Return the result table ordered by employee_id in ascending order.


#Solution 1:
select employee_id from employees where employee_id not in(
select e.employee_id
from employees e
inner join salaries s on e.employee_id=s.employee_id)
UNION
select employee_id from salaries where employee_id not in(
select e.employee_id
from employees e
inner join salaries s on e.employee_id=s.employee_id)


----------------------------------------------------------------------------------------------------------------------------------------------


# Question 2 - Rearrange Products Table
Table: Products

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| product_id  | int     |
| store1      | int     |
| store2      | int     |
| store3      | int     |
+-------------+---------+
product_id is the primary key for this table.
Each row in this table indicates the product's price in 3 different stores: store1, store2, and store3.
If the product is not available in a store, the price will be null in that store's column.
Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
Return the result table in any order.


#Solution 2:
select product_id , 'store1' as store,store1 as price
from Products
where store1 is not null
union
select product_id , 'store2' as store,store2 as price
from Products
where store2 is not null
union
select product_id , 'store3' as store,store3 as price
from Products
where store3 is not null


----------------------------------------------------------------------------------------------------------------------------------------------


#Question 3 - Tree Node
Table: Tree

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| p_id        | int  |
+-------------+------+
id is the primary key column for this table.
Each row of this table contains information about the id of a node and the id of its parent node in a tree.
The given structure is always a valid tree.
Each node in the tree can be one of three types:
"Leaf": if the node is a leaf node.
"Root": if the node is the root of the tree.
"Inner": If the node is neither a leaf node nor a root node.
Write an SQL query to report the type of each node in the tree.
Return the result table ordered by id in ascending order.


#Solution 3:
select id, 
case
    when p_id is null then 'Root'
    when id in(select distinct p_id from Tree) then 'Inner'
    else 'Leaf'
end as type
from Tree